/**
	 * Notify the host application a download should be done, or that the data
	 * should be streamed if a streaming viewer is available.
	 * 
	 * @param activity
	 *            Activity requesting the download.
	 * @param url
	 *            The full url to the content that should be downloaded
	 * @param userAgent
	 *            User agent of the downloading application.
	 * @param contentDisposition
	 *            Content-disposition http header, if present.
	 * @param mimetype
	 *            The mimetype of the content reported by the server
	 * @param privateBrowsing
	 *            If the request is coming from a private browsing tab.
	 */
	public static void onDownloadStart(Activity activity, String url, String userAgent,
			String contentDisposition, String mimetype, boolean privateBrowsing) {
		// if we're dealing wih A/V content that's not explicitly marked
		// for download, check if it's streamable.
		if (contentDisposition == null
				|| !contentDisposition.regionMatches(true, 0, "attachment", 0, 10)) {
			// query the package manager to see if there's a registered handler
			// that matches.
			Intent intent = new Intent(Intent.ACTION_VIEW);
			intent.setDataAndType(Uri.parse(url), mimetype);
			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			ResolveInfo info = activity.getPackageManager().resolveActivity(intent,
					PackageManager.MATCH_DEFAULT_ONLY);
			if (info != null) {
				ComponentName myName = activity.getComponentName();
				// If we resolved to ourselves, we don't want to attempt to
				// load the url only to try and download it again.
				if (!myName.getPackageName().equals(info.activityInfo.packageName)
						|| !myName.getClassName().equals(info.activityInfo.name)) {
					// someone (other than us) knows how to handle this mime
					// type with this scheme, don't download.
					try {
						activity.startActivity(intent);
						return;
					} catch (ActivityNotFoundException ex) {
						// Best behavior is to fall back to a download in this
						// case
					}
				}
			}
		}
		onDownloadStartNoStream(activity, url, userAgent, contentDisposition, mimetype,
				privateBrowsing);
	}